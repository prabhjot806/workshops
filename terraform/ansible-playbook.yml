---
- hosts: all
  remote_user: solo
  become: yes
  become_user: root
  become_method: sudo
  vars:
    reboot_vm: yes # reboot machine at the end of the playbook
    reset_repo: no # force overwrite of local changes
    terminal_title: "solo.io workshops"

  roles:
    - k9s

  tasks:

  - name: Print parameters
    debug:
      msg: "reboot_vm={{ reboot_vm | bool }} reset_repo={{ reset_repo | bool }}"
  
  - name: Populate service facts
    service_facts:

  - name: Add apt keys
    apt_key:
      url: "{{ item }}"
      state: present
    loop:
    - https://download.docker.com/linux/ubuntu/gpg
    - https://dl.google.com/linux/linux_signing_key.pub
    - https://packages.microsoft.com/keys/microsoft.asc
    - https://baltocdn.com/helm/signing.asc

  - name: Add apt repositories
    apt_repository:
      repo: "{{ item }}"
      state: present
    loop:
    - deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    - deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
    - deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
    - deb https://baltocdn.com/helm/stable/debian/ all main

  - name: Install baseline software
    apt:
      state: present
      update_cache: yes
      name:
      - jq
      - curl
      - apt-transport-https
      - ca-certificates
      - gnupg-agent
      - software-properties-common
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - bash-completion
      - libcairo2-dev
      - libjpeg-turbo8-dev
      - libpng-dev
      - libtool-bin
      - libossp-uuid-dev
      - libavcodec-dev
      - libavformat-dev
      - libavutil-dev
      - libswscale-dev
      - freerdp2-dev
      - libpango1.0-dev
      - libssh2-1-dev
      - libtelnet-dev
      - libvncserver-dev
      - libwebsockets-dev
      - libpulse-dev
      - libssl-dev
      - libvorbis-dev
      - libwebp-dev
      - build-essential
      - autocutsel
      - tightvncserver
      - socat
      - dbus-x11
      - gnome-session
      - ubuntu-gnome-desktop
      - gnome-panel
      - gdm3
      - google-chrome-stable
      - xfce4-terminal
      - code
      - python
      - apache2-utils
      - apt-transport-https
      - helm
      - emacs
      - tomcat9

  - name: Add the solo user to the docker group
    user:
      name: solo
      groups: docker
      append: yes

  - name: Download kind
    get_url:
      url: https://kind.sigs.k8s.io/dl/v0.8.1/kind-linux-amd64
      dest: /usr/local/bin/kind
      mode: '0755'

  - name: Get Latest Kubernetes Version
    get_url:
      url: https://storage.googleapis.com/kubernetes-release/release/stable.txt
      dest: /tmp/version

  - name: Read Kubernetes version
    command: cat /tmp/version
    register: kubernetes_version
    changed_when: false

  - name: Print Kubernetes version
    debug:
      msg: "Kubernetes version is {{ kubernetes_version.stdout }}"

  - name: Download kubectl
    get_url:
      url: "https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version.stdout }}/bin/linux/amd64/kubectl"
      dest: /usr/local/bin/kubectl
      mode: '0755'
  
  - name: Enable kubectl autocompletion
    shell: kubectl completion bash > /etc/bash_completion.d/kubectl

  - name: Unarchive guacamole
    unarchive:
      src: https://mirrors.ircam.fr/pub/apache/guacamole/1.2.0/source/guacamole-server-1.2.0.tar.gz
      dest: /
      remote_src: yes
    when:
    - "not ansible_facts.services is defined or not ansible_facts.services.guacd is defined or not ansible_facts.services.guacd.state == 'running'"

  - name: Configure guacamole
    shell: cd /guacamole-server-1.2.0 && ./configure --with-init-dir=/etc/init.d
    when:
    - "not ansible_facts.services is defined or not ansible_facts.services.guacd is defined or not ansible_facts.services.guacd.state == 'running'"

  - name: Make guacamole
    make:
      chdir: /guacamole-server-1.2.0
    when:
    - "not ansible_facts.services is defined or not ansible_facts.services.guacd is defined or not ansible_facts.services.guacd.state == 'running'"

  - name: Make install guacamole
    make:
      chdir: /guacamole-server-1.2.0
      target: install
    when:
    - "not ansible_facts.services is defined or not ansible_facts.services.guacd is defined or not ansible_facts.services.guacd.state == 'running'"

  - name: Download guacamole war
    get_url:
      url: https://mirrors.ircam.fr/pub/apache/guacamole/1.2.0/binary/guacamole-1.2.0.war
      dest: /var/lib/tomcat9/webapps/guacamole.war
    when:
    - "not ansible_facts.services is defined or not ansible_facts.services.guacd is defined or not ansible_facts.services.guacd.state == 'running'"

  - name: Create the /home/solo/.vnc directory if it does not exist
    file:
      path: /home/solo/.vnc
      state: directory
      owner: solo
      group: solo
      mode: '0700'

  - name: Remove /home/solo/.vnc/passwd
    file:
      path: /home/solo/.vnc/passwd
      state: absent

  - name: Set VNC password
    shell: >
      set -o pipefail && \
        echo password | vncpasswd -f > /home/solo/.vnc/passwd
    args:
      executable: /bin/bash
    become_user: solo
    become_method: sudo

  - name: Set the permissions of the /home/solo/.vnc/passwd file
    file:
      path: /home/solo/.vnc/passwd
      owner: solo
      group: solo
      mode: '0600'

  - name: Download the Solo background image
    get_url:
      url: https://github.com/solo-io/workshops/raw/master/terraform/solo-white.png
      dest: /home/solo/solo-white.png

  - name: Create the /home/solo/.config directory if it does not exist
    file:
      path: /home/solo/.config
      state: directory
      owner: solo
      group: solo
      mode: '0700'

  - name: Escape initial setup
    file:
      path: /home/solo/.config/gnome-initial-setup-done
      state: touch

  - name: Create the /etc/opt/chrome/policies/managed directory if it does not exist
    file:
      path: /etc/opt/chrome/policies/managed
      state: directory

  - name: Create the /etc/opt/chrome/policies/recommended directory if it does not exist
    file:
      path: /etc/opt/chrome/policies/recommended
      state: directory

  - name: Set the /etc/opt/chrome/policies/managed/test_policy.json
    copy:
      content: |
                {
                  "ExtensionInstallForcelist": ["fkbfebkcoelajmhanocgppanfoojcdmg;https://clients2.google.com/service/update2/crx"],
                  "NewTabPageLocation": "https://workshops.solo.io"
                }
      dest: /etc/opt/chrome/policies/managed/test_policy.json

  - name: Create the /home/solo/Desktop directory if it does not exist
    file:
      path: /home/solo/Desktop
      state: directory
      owner: solo
      group: solo
      mode: '0700'

  - name: Copy the Xfce4 terminal shortcut
    copy:
      src: /usr/share/applications/xfce4-terminal.desktop
      dest: /home/solo/Desktop/
      remote_src: yes
      owner: solo
      group: solo

  - name: Create the /home/solo/.config/xfce4/terminal/ directory if it does not exist
    file:
      path: /home/solo/.config/xfce4/terminal
      state: directory

  - name: Set the /home/solo/.config/xfce4/terminal/terminalrc
    copy:
      content: |
                [Configuration]
                MiscShowUnsafePasteDialog=FALSE
                TitleInitial={{ terminal_title }}
      dest: /home/solo/.config/xfce4/terminal/terminalrc

  - name: Copy the Google Chrome shortcut
    copy:
      src: /usr/share/applications/google-chrome.desktop
      dest: /home/solo/Desktop/
      remote_src: yes
      owner: solo
      group: solo

  - name: Set the /home/solo/.vnc/xstartup content
    copy:
      content: |
                #!/bin/sh

                export XKL_XMODMAP_DISABLE=1
                unset SESSION_MANAGER
                unset DBUS_SESSION_BUS_ADDRESS

                export XKL_XMODMAP_DISABLE=1
                export XDG_CURRENT_DESKTOP="GNOME-Flashback:Unity"
                export XDG_MENU_PREFIX="gnome-flashback-"

                [ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup
                [ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
                xsetroot -solid grey
                vncconfig -iconic &

                gnome-session --session=gnome-flashback-metacity --disable-acceleration-check &
                gsettings set org.gnome.desktop.background picture-uri file:////home/solo/solo-white.png

                gnome-panel &
                metacity &
      dest: /home/solo/.vnc/xstartup
      owner: solo
      group: solo
      mode: '0777'

  - name: Create the /etc/guacamole directory if it does not exist
    file:
      path: /etc/guacamole
      state: directory

  - name: Set the /etc/guacamole/guacd.conf content
    copy:
      content: |
                [server]

                bind_host = localhost
                bind_port = 4822
      dest: /etc/guacamole/guacd.conf

  - name: Set the /etc/guacamole/user-mapping.xml content
    copy:
      content: |
                <user-mapping>
                  <authorize username="solo" password="Workshop1#">
                    <protocol>vnc</protocol>
                    <param name="hostname">localhost</param>
                    <param name="port">5901</param>
                    <param name="password">password</param>
                  </authorize>
                </user-mapping>
      dest: /etc/guacamole/user-mapping.xml

  - name: Set the /etc/systemd/system/vncserver@.service content
    copy:
      content: |
                [Unit]
                Description=Remote desktop service (VNC)
                After=syslog.target network.target

                [Service]
                Type=forking
                User=solo

                # Clean any existing files in /tmp/.X11-unix environment
                ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill %i > /dev/null 2>&1 || :'
                ExecStart=/usr/bin/vncserver -geometry 1800x1000 -depth 16 -dpi 120 -alwaysshared -localhost %i
                ExecStop=/usr/bin/vncserver -kill %i

                [Install]
                WantedBy=multi-user.target
      dest: /etc/systemd/system/vncserver@.service

  - name: Set the /etc/systemd/system/socat.service content
    copy:
      content: |
                [Unit]
                Description=Socat service
                After=tomcat9.target

                [Service]
                Type=simple
                User=root

                # Clean any existing files in /tmp/.X11-unix environment
                ExecStartPre=/bin/sh -c '/usr/bin/pkill socat > /dev/null 2>&1 || :'
                ExecStart=/usr/bin/socat tcp-listen:80,reuseaddr,fork tcp:localhost:8888
                ExecStop=/usr/bin/pkill socat

                [Install]
                WantedBy=multi-user.target
      dest: /etc/systemd/system/socat.service

  - name: Run ldconfig
    command: ldconfig

  - name: Stop the tomcat9 service
    systemd:
      name: tomcat9
      state: stopped

  - name: Update the tomcat9 configuration to use port 8888
    replace:
      path: /etc/tomcat9/server.xml
      regexp: '8080'
      replace: '8888'

  - name: Enable services
    service:
      name: "{{ item }}"
      enabled: yes
    loop:
    - vncserver@:1
    - tomcat9
    - guacd
    - socat

  - name: Start services
    service:
      name: "{{ item }}"
      enabled: yes
      state: 'started'
    loop:
    - vncserver@:1
    - tomcat9
    - guacd
    - socat
    when: "not ( reboot_vm | bool )"

  - name: Remove any existing directory from prior runs
    file:
      state: absent
      path: /home/solo/workshops
    when: "reset_repo | bool"

  - name: Check the /home/solo/workshops has been cloned
    stat:
      path: /home/solo/workshops
    register: workshop_folder

  - name: Clone the workshop repo
    git:
      repo: https://github.com/solo-io/workshops.git
      dest: /home/solo/workshops
    become_user: solo
    become_method: sudo
    when: not workshop_folder.stat.exists

  - name: Fix a known issue with VSCode
    shell: sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0

  - name: Get glooctl installer
    get_url:
      url: https://run.solo.io/gloo/install
      dest: /home/solo/glooctl_install
      mode: '0755'
    become_user: solo
    become_method: sudo

  - name: Install glooctl
    command: /home/solo/glooctl_install
    become_user: solo
    become_method: sudo

  - name: Enable clipboard when launching the terminal
    lineinfile:
      path: /home/solo/.bashrc
      line: 'usr/bin/autocutsel -s CLIPBOARD -fork'
    become_user: solo
    become_method: sudo
  
  - name: Add glooctl to the path
    lineinfile:
      path: /home/solo/.bashrc
      line: 'export PATH=$HOME/.gloo/bin:$PATH'
    become_user: solo
    become_method: sudo

  - name: Add LICENSE_KEY environment variable
    lineinfile:
      path: /home/solo/.bashrc
      line: "export LICENSE_KEY={{ lookup('env','LICENSE_KEY') }}"
    become_user: solo
    become_method: sudo
    no_log: true

  - name: Add GLOO_MESH_LICENSE_KEY environment variable
    lineinfile:
      path: /home/solo/.bashrc
      line: "export GLOO_MESH_LICENSE_KEY={{ lookup('env','GLOO_MESH_LICENSE_KEY') }}"
    become_user: solo
    become_method: sudo
    no_log: true

  - name: Add PORTAL_LICENSE_KEY environment variable
    lineinfile:
      path: /home/solo/.bashrc
      line: "export PORTAL_LICENSE_KEY={{ lookup('env','PORTAL_LICENSE_KEY') }}"
    become_user: solo
    become_method: sudo
    no_log: true

  - name: Create vimrc
    command: touch $HOME/.vimrc
    become_user: solo
    become_method: sudo

  - name: Turn on line numbers by default
    lineinfile:
      path: /home/solo/.vimrc
      line: 'set number'
    become_user: solo
    become_method: sudo

  - name: Set default keyring (path creation)
    file:
      path: /home/solo/.local/share/keyrings
      state: directory
    become_user: solo
    become_method: sudo

  - name: Set default keyring (content)
    copy:
      content: |
                [keyring]
                display-name=Default keyring
                ctime=1623227729
                mtime=0
                lock-on-idle=false
                lock-after=false

                [2]
                item-type=0
                display-name=Chrome Safe Storage
                secret=ucj3eCSYrBEifzVk3WB57A==
                mtime=1623227729
                ctime=1623227729

                [2:attribute0]
                name=application
                type=string
                value=chrome

                [2:attribute1]
                name=xdg:schema
                type=string
                value=chrome_libsecret_os_crypt_password_v2

                [1]
                item-type=0
                display-name=Chrome Safe Storage Control
                secret=The meaning of life
                mtime=1623227729
                ctime=1623227729

                [1:attribute0]
                name=explanation
                type=string
                value=Because of quirks in the gnome libsecret API, Chrome needs to store a dummy entry to guarantee that this keyring was properly unlocked. More details at http://crbug.com/660005.

                [1:attribute1]
                name=xdg:schema
                type=string
                value=_chrome_dummy_schema_for_unlocking
      dest: /home/solo/.local/share/keyrings/Default_keyring.keyring
      mode: '0600'
    become_user: solo
    become_method: sudo

  - name: Set default keyring (pointer)
    copy:
      content: |
                Default_keyring
      dest: /home/solo/.local/share/keyrings/default
      mode: '0644'
    become_user: solo
    become_method: sudo

  - name: Download and install step-cli
    apt:
      deb: "https://github.com/smallstep/cli/releases/download/v0.15.3/step-cli_0.15.3_amd64.deb"

  - name: Reboot VM
    reboot:
    when: "reboot_vm | bool"
